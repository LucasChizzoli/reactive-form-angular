// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`LoginFormComponent should have email and password 1`] = `
LoginFormComponent {
  "LOGIN_FIELDS": Array [
    Object {
      "name": "email",
      "validators": Array [
        [Function],
        [Function],
      ],
    },
    Object {
      "name": "password",
      "validators": Array [
        [Function],
        [Function],
      ],
    },
  ],
  "loginForm": FormGroup {
    "_composedAsyncValidatorFn": null,
    "_composedValidatorFn": null,
    "_hasOwnPendingAsyncValidator": false,
    "_onCollectionChange": [Function],
    "_onDisabledChange": Array [],
    "_parent": null,
    "_rawAsyncValidators": null,
    "_rawValidators": null,
    "controls": Object {
      "email": FormControl {
        "_composedAsyncValidatorFn": null,
        "_composedValidatorFn": [Function],
        "_hasOwnPendingAsyncValidator": false,
        "_onChange": Array [
          [Function],
          [Function],
        ],
        "_onCollectionChange": [Function],
        "_onDisabledChange": Array [
          [Function],
          [Function],
        ],
        "_parent": [Circular],
        "_pendingValue": "",
        "_rawAsyncValidators": null,
        "_rawValidators": Array [
          [Function],
          [Function],
          [Function],
          [Function],
        ],
        "errors": Object {
          "required": true,
        },
        "pristine": true,
        "status": "INVALID",
        "statusChanges": EventEmitter_ {
          "__isAsync": false,
          "_isScalar": false,
          "closed": false,
          "hasError": false,
          "isStopped": false,
          "observers": Array [],
          "thrownError": null,
        },
        "touched": false,
        "value": "",
        "valueChanges": EventEmitter_ {
          "__isAsync": false,
          "_isScalar": false,
          "closed": false,
          "hasError": false,
          "isStopped": false,
          "observers": Array [],
          "thrownError": null,
        },
      },
      "password": FormControl {
        "_composedAsyncValidatorFn": null,
        "_composedValidatorFn": [Function],
        "_hasOwnPendingAsyncValidator": false,
        "_onChange": Array [
          [Function],
          [Function],
        ],
        "_onCollectionChange": [Function],
        "_onDisabledChange": Array [
          [Function],
          [Function],
        ],
        "_parent": [Circular],
        "_pendingValue": "",
        "_rawAsyncValidators": null,
        "_rawValidators": Array [
          [Function],
          [Function],
          [Function],
          [Function],
        ],
        "errors": Object {
          "required": true,
        },
        "pristine": true,
        "status": "INVALID",
        "statusChanges": EventEmitter_ {
          "__isAsync": false,
          "_isScalar": false,
          "closed": false,
          "hasError": false,
          "isStopped": false,
          "observers": Array [],
          "thrownError": null,
        },
        "touched": false,
        "value": "",
        "valueChanges": EventEmitter_ {
          "__isAsync": false,
          "_isScalar": false,
          "closed": false,
          "hasError": false,
          "isStopped": false,
          "observers": Array [],
          "thrownError": null,
        },
      },
    },
    "errors": null,
    "pristine": true,
    "status": "INVALID",
    "statusChanges": EventEmitter_ {
      "__isAsync": false,
      "_isScalar": false,
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [],
      "thrownError": null,
    },
    "touched": false,
    "value": Object {
      "email": "",
      "password": "",
    },
    "valueChanges": EventEmitter_ {
      "__isAsync": false,
      "_isScalar": false,
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [],
      "thrownError": null,
    },
  },
  "loginSubmit": EventEmitter_ {
    "__isAsync": false,
    "_isScalar": false,
    "closed": false,
    "hasError": false,
    "isStopped": false,
    "observers": Array [],
    "thrownError": null,
  },
}
`;
